#!/usr/bin/env python
import os, fnmatch
from subprocess import check_output, CalledProcessError
from argparse import ArgumentParser
from jinja2 import Environment

def get_parser():
    parser = ArgumentParser(description='Build a TADS 3 story')
    parser.add_argument('sourcedir', help='path containing tads3 code')
    parser.add_argument('-b', help='build gamefile', action='store_true')
    parser.add_argument('-r', help='run gamefile', action='store_true')
    return parser

parser = get_parser()
args = parser.parse_args()

def get_template():
    return Environment().from_string("""
    
# {{ game_name }}
# {{ game_author }}
# {{ game_desc }}

-D "LANGUAGE=en_us" 
-D "MESSAGESTYLE=neu" 
-D TADS_INCLUDE_NET

-Fy "obj" 
-Fo "obj"

# image file
-o bin/{{ gamefile }}

-v
-a 
-statprefix <@> 
-statpct 

-I /usr/local/share/frobtads/tads3/lib/

-lib system
-lib webui
-source tadsnet
-lib adv3/adv3web

# source files
{% for file in sources %}
-source {{ file }}
{% endfor %}

""")

def get_sources():
    matches = []
    for root, dirnames, filenames in os.walk(args.sourcedir):
      for filename in fnmatch.filter(filenames, '*.t'):
          matches.append(os.path.join(root, filename))    
    return matches

def render_template(info, sources):
    filename = info.get('name', 'game')
    filename = filename.replace(' ', '_')
    filename = filename.lower()

    gamefile = filename + '.t3'

    template = get_template()
    result = template.render({
        'gamefile': gamefile,
        'game_name': info.get('name', ''),
        'game_author': info.get('byline', ''),
        'game_desc': info.get('desc', ''),
        'sources': sources,
    })

    makefile = filename + '.make' 
    with open(makefile, 'w') as fobj:
        fobj.write(result)

    return makefile, gamefile

def find_version_info():
    version_info = {}
    try:
        retval = check_output("grep -nr 'versionInfo' %s" % args.sourcedir, shell=True)
    except CalledProcessError as e:
        print e, e.args
    if retval and retval.count(':') >= 2:
        filename, lineno, match = retval.split(':', 2)
        lineno = int(lineno)
        with open(filename, 'r') as fobj:
            text = fobj.read()
            lines = text.splitlines()
            run = True
            while(run):
                line = lines[lineno]
                print line
                if line[:1] in ['}', ';']:
                    run = False
                elif '=' in line:
                    # import pdb; pdb.set_trace()
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    value = value.strip('\'"')
                    if key in ['name', 'byline', 'desc']:
                        version_info[key] = value
                lineno += 1
    return version_info

def render_makefile():
    info = find_version_info()
    sources = get_sources()
    return render_template(info, sources)

def build_makefile(makefile):
    try: 
        retval = check_output("t3make -f %s" % makefile, shell=True)
    except CalledProcessError as e:

        def filter_output(output):
            newlines = []
            for line in output.splitlines():
                if not line.startswith('<@>'):
                    newlines.append(line)
            return '\n'.join(newlines)
        print filter_output(e.output)


def run_gamefile(gamefile):
    retval = check_output(' frob -i plain -k utf8 -N 44 build/%s' % gamefile)

if "__main__" == __name__:
    makefile, gamefile = render_makefile()
    if args.b:
        build_makefile(makefile)

    if args.r:
        run_gamefile(gamefile)
