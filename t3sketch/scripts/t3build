#!/usr/bin/env python2
import os, fnmatch, sys
from subprocess import check_output, CalledProcessError, call
from argparse import ArgumentParser
from jinja2 import Environment

BUILDPREFIX = './obj'

def get_parser():
    parser = ArgumentParser(description='Build a TADS 3 story')
    parser.add_argument('-s', help='path containing tads3 code', default='src')
    parser.add_argument('-b', help='build gamefile', action='store_true')
    parser.add_argument('-a', help='rebuild all objects', action='store_true')
    parser.add_argument('-w', help='host gamefile in browser', action='store_true')
    parser.add_argument('-r', help='run gamefile', action='store_true')
    parser.add_argument('-d', help='debug mode', action='store_true')
    parser.add_argument('-u', help='upload gamefile', action='store_true')
    parser.add_argument('-D', help='output dir', default='build')
    parser.add_argument('-H', help='build html version', action='store_true')
    return parser


parser = get_parser()
args = parser.parse_args()


def get_template():
    return Environment().from_string("""

# {{ game_name }}
# {{ game_author }}
# {{ game_desc }}

{% if debug_mode %}
-d
{% endif %}

-D "LANGUAGE=en_us"
-D "MESSAGESTYLE=neu"

{% if html %}
-D TADS_INCLUDE_NET
{% endif %}

-FC
-Fy ""{% if build_dir %}{{build_dir}}{% endif %}{% if html %}htmlobj{% else %}obj{% endif %}"
-Fo "{% if build_dir %}{{build_dir}}{% endif %}{% if html %}htmlobj{% else %}obj{% endif %}"

# image file
-o {% if build_dir %}{{build_dir}}/{% endif %}bin/{{ gamefile }}

-v
-statprefix <@>
-statpct

-I /usr/local/share/frobtads/tads3/lib/

-lib system
{% if html %}
-lib webui
-source tadsnet
-lib adv3/adv3web
{% else %}
-lib adv3/adv3
{% endif %}

# source files
{% for file in sources %}
-source {{ file }}
{% endfor %}

""")

def get_sources():
    matches = []
    for root, dirnames, filenames in os.walk(args.s):
      for filename in fnmatch.filter(filenames, '*.t'):
          matches.append(os.path.join(root, filename))    
    return matches

def render_template(info, sources, html=False, debug=False):
    filename = info.get('name', 'game')
    filename = filename.replace(' ', '_')
    filename = filename.lower()

    if html:
        filename = filename + '_html'

    gamefile = filename + '.t3'

    template = get_template()
    result = template.render({
        'gamefile': gamefile,
        'game_name': info.get('name', ''),
        'game_author': info.get('byline', ''),
        'game_desc': info.get('desc', ''),
        'sources': sources,
        'html': html,
        'debug_mode': debug,
    })

    makefile = filename + '.t3m' 
    with open(makefile, 'w') as fobj:
        fobj.write(result)
    return makefile, gamefile

def find_version_info():
    version_info = {}
    try:
        retval = check_output("grep -nr 'versionInfo' %s" % args.s, shell=True)
    except CalledProcessError as e:
        print e, e.args
    if retval and retval.count(':') >= 2:
        filename, lineno, match = retval.split(':', 2)
        lineno = int(lineno)
        with open(filename, 'r') as fobj:
            text = fobj.read()
            lines = text.splitlines()
            run = True
            while(run):
                line = lines[lineno]
                print line
                if line[:1] in ['}', ';']:
                    run = False
                elif '=' in line:
                    # import pdb; pdb.set_trace()
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    value = value.strip('\'"')
                    if key in ['name', 'byline', 'desc']:
                        version_info[key] = value
                lineno += 1
    return version_info

def render_makefile(info, html=False, debug=False):
    sources = get_sources()
    return render_template(info, sources, html=html, debug=debug)

def build_makefile(makefile, all=False):
    a = ''
    if all:
        a = '-a'
    try: 
        retval = check_output("t3make %s -f %s" % (a, makefile), shell=True)
    except CalledProcessError as e:

        def filter_output(output):
            newlines = []
            for line in output.splitlines():
                if not line.startswith('<@>'):
                    newlines.append(line)
            return '\n'.join(newlines)
        print filter_output(e.output)


def host_gamefile(gamefile):
    try:
        retval = call(('frob -i plain -k utf8 -N 44 bin/%s' % gamefile).split())
    except KeyboardInterrupt:
        pass        

def run_gamefile(gamefile):
    try:
        retval = call(('frob -k utf8 bin/%s' % gamefile).split())
    except KeyboardInterrupt:
        pass        

def upload_gamefile(gamefile):
    try:
        retval = call(('scp bin/%s root@ldlework.com:/var/txweb/ldlework.com/' % gamefile).split())
    except CalledProcessError as e:
        print e.output

if "__main__" == __name__:
    info = find_version_info()

    os.makedirs(args.D)
    makefile, gamefile = render_makefile(info, debug=args.d, html=False)
    if args.H:
        html_makefile, html_gamefile = render_makefile(info, debug=args.d, html=True)

    if args.b:
        print "Building makefile `%s`" % makefile
        build_makefile(makefile, all=args.a)

        if args.H:
            print "Building html makefile `%s`" % html_makefile
            build_makefile(html_makefile, all=args.a)

    if args.r:
        print "Running gamefile `bin/%s`" % gamefile
        run_gamefile(gamefile)

    if args.u:
        print "Uploading gamefile `bin/%s`" % gamefile
        upload_gamefile(gamefile)
        if args.H:
            print "Uploading html gamefile `bin/%s`" % html_gamefile
            upload_gamefile(html_gamefile)

    if args.w and args.H:
        print "Hosting gamefile `bin/%s`" % html_gamefile
        host_gamefile(html_gamefile)
